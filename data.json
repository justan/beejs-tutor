{
  "list": [
    {
      "steps": [
        {
          "note": "`new Bee`\n--\n\n---\n\n** [Beejs] ** 是一个面向现在 MVVM 库, 支持数据绑定及自定义标签功能.\n\n\n通过本教程希望您花上 15 分钟即可熟悉 beejs 的主要用法.\n\n---\n\n<a href=\"javascript:;\" class=\"bee-intro\">点击链接了解本教程的用法</a>\n\n\n[beejs]: https://github.com/CFETeam/bee.js",
          "init": "$('body').off('click.bee-intro').on('click.bee-intro', '.bee-intro', function(e) {\n  setTimeout(function(){\n    $('body').off('click.intro').on('click.intro', function(e) {\n      if(intro && (!$(e.target).parents('.introjs-tooltip').length)){\n        intro.exit()\n        $('body').off('click.intro')\n      }\n    })\n  },0);\n  var intro = introJs();\n  intro.setOptions({\n    steps:[\n      {\n        element: $('.html .CodeMirror')[0],\n        intro: '这里是 HTML 模板区. 可以自由编辑 HTML 模板内容. 在该区域还支持 zen coding 快速编写哦!'\n      },\n      {\n        element: $('.javascript .CodeMirror')[0],\n        intro: '这里是 Javascript 代码区. 编写 js 与 HTML 交互.'\n      },\n      {\n        element: $('.javascript .exe')[0],\n        intro: '点击该按钮将会执行 HTML 区及 JS 区的内容, 并将其显示到内容预览区.'\n      },\n      {\n        element: $('#reset')[0],\n        intro: '修改了代码之后. 点击该按钮将会恢复教程原来的代码.'\n      },\n      {\n        element: $('.output')[0],\n        intro: '代码的运行后, HTML 内容将展现在这里.'\n      }\n    ]\n  });\n  intro.start();\n})",
          "html": "<p>\n  在这里编写 HTML 代码\n</p>",
          "javascript": "console.log('Hello Beejs!')",
          "fixCode": {}
        },
        {
          "note": "### 模板与 Javascript\n\n完整的 `Beejs` 程序包括模板和 Js 两部分.  \n\n`Beejs` 模板应该是标准的 `HTML` 片段. 可以为字符串或 DOM 元素. \n\n模板需要通过 `Bee` 构造函数进行解析生成一个 `bee` 实例 (**ViewModel 实例**) 才能发挥功能. ",
          "init": "",
          "html": "<div id=\"template\">\n  {{name}}\n</div>",
          "javascript": "var bee = new Bee(document.getElementById('template'), {\n  $data: {\n    name: 'Bee'\n  }\n})",
          "fixCode": {}
        }
      ],
      "title": "Hello Beejs"
    },
    {
      "steps": [
        {
          "note": "除了普通的 `HTML` 标签外,  在模板中 `beejs` 还具有两种特有标记: **指令(Directive)** 和 **表达式**.\n\n- 指令是来自 [angularJs] 中的概念. 在 `beejs` 中的指令都是带有 `b-` 前缀的 `HTML` 元素属性.\n- `Beejs` 中的表达式是 `javascript` 表达式的不严格子集. \n\n比如右侧示例模板中 `b-model=\"name\"` 就是一个指令. \n\n`{{name.split('').reverse().join('')}}` 则是一个使用在文本中的表达式. 表达式可以使用在普通文本位置及元素属性值上 (包括普通属性和指令).\n\n[angularJs]: https://angularjs.org",
          "init": "",
          "html": "<div id=\"template\">\n  <input type=\"text\" b-model=\"name\" />\n  {{name.split('').reverse().join('')}}\n</div>",
          "javascript": "new Bee(document.getElementById('template'), {\n  $data: {\n    name: 'Bee'\n  }\n})",
          "fixCode": {}
        },
        {
          "note": "在模板中使用双重大括号  `{{}}` 表示表达式求值. \n\n点击 \"Run\" 按钮运行程序来查看结果.\n\n---\n\n对于内容中包括 `HTML` 标签的内容来说, 普通的双大括号输出是转义 (escape) 过后的内容. \n\n如果想输出非转义 (unescape) 的 `HTML` 内容,  可以使用三重大括号 `{{{}}}`. \n\n需要注意的一点是非转义内容在 `HTML` 属性中仍然会被转义.\n\n---\n\n试着输入框中输入 `HTML` 标签看下运行效果. 然后再点击补全代码按钮以观看非转义标签的效果.",
          "init": "",
          "html": "<div id=\"template\">\n  <input type=\"text\" b-model=\"name\" />\n  <p title=\"名字: {{name}}\">{{name}}</p>\n</div>",
          "javascript": "new Bee(document.getElementById('template'), {\n  $data: {\n    name: 'Bee'\n  }\n})",
          "fixCode": {
            "html": "<div id=\"template\">\n  <input type=\"text\" b-model=\"name\" />\n  <p title=\"名字: {{{name}}}\">{{{name}}}</p>\n</div>",
            "javascript": "new Bee(document.getElementById('template'), {\n  $data: {\n    name: '<strong>Bee</strong>'\n  }\n})"
          }
        }
      ],
      "title": "Beejs 中的模板"
    },
    {
      "steps": [
        {
          "note": "  指令 (directive) 是来自 angularJs 中的概念. 其用特定的属性增强了 HTML 的功能.\n\n在 `beejs` 中主要功能都是基于指令完成的.  `Beejs` 中内置的指令包括: \n\n- [b-text], [b-html] 文本 / HTML 指令\n- [b-if] 条件指令\n- [b-repeat] Repeat 指令\n- [b-model]  双向绑定指令\n- [b-on] 事件指令\n- [b-attr] 属性指令\n- [b-style], [b-src] 样式 / src 指令\n- [b-content] 内容指令\n- [b-component] 组件指令\n\n\n[b-text]: #3/2\n[b-html]: #3/2\n[b-if]: #3/3\n[b-repeat]: #3/4\n[b-model]: #3/5\n[b-on]: #3/6\n[b-attr]: #3/7\n[b-style]: #3/8\n[b-src]: #3/8\n[b-content]: #3/9\n[b-component]: #3/10\n",
          "init": "",
          "html": "<div id=\"template\">\n  <input type=\"text\" b-model=\"name\" />\n  <p title=\"名字: {{name}}\">{{name}}</p>\n</div>",
          "javascript": "new Bee(document.getElementById('template'), {\n  $data: {\n    name: 'Bee'\n  }\n})",
          "fixCode": {}
        },
        {
          "note": "### b-text, b-html\n\n在文本中这两个指令分别等效于 `{{}}` 和 `{{{}}}` 表达式.\n\n这两个个指令与花括号表达式直接量的区别在于, 双重花括号表达式可用于属性之中. 而 `b-text, b-html` 指令只能用于文本内容.\n\n",
          "init": "",
          "html": "<div id=\"template\">\n  <span b-text=\"name\"></span>\n  <span b-html=\"name\"></span>\n  <hr />\n  {{name}}\n  {{{name}}}\n</div>",
          "javascript": "new Bee(document.getElementById('template'), {\n  $data: {\n    name: 'Bee'\n  }\n})",
          "fixCode": {}
        },
        {
          "note": "### b-if\n\n模板中的条件判断使用 `b-if` . 当 `b-if` 对应表达式中表达式值为假时, `b-if` 指令所在的节点将不会出现在 `DOM` 树中, 为真时则正常显示.\n\n修改 `isShow` 值为 `false` 查看效果.",
          "init": "",
          "html": "<div id=\"template\">\n  {{isShow}}\n  <p b-if=\"isShow\">当 isShow 为假时, 这段文字将从 DOM 树种移除</p>\n</div>",
          "javascript": "new Bee(document.getElementById('template'), {\n  $data: {\n    isShow: true\n  }\n})",
          "fixCode": {
            "javascript": "new Bee(document.getElementById('template'), {\n  $data: {\n    isShow: false\n  }\n})"
          }
        },
        {
          "note": "### b-repeat\n\n`b-repeat` 指令用于显示数组中的内容. \n\nRepeat 指令中使用 `item in list` 这种语法, `item` 表示数组内容, `list` 为数组或者结果为数组的表达式. 另外使用 `$index` 表示条目在列表中的索引.\n\n对于 `b-repeat` 指令目标数组 `list`, `beejs` 会为其添加三个操作方法: `$set, $replace, $remove`.\n\n另外 `beejs` 会监控该数组的操作方法 `splice, push, pop, shift, unshift, sort, reverse`, 并更新界面.",
          "init": "",
          "html": "<div id=\"template\">\n  <ul>\n  \t<li b-repeat=\"item in list\">{{$index + 1}}. {{item.name}}</li>\n  </ul>\n  <p>共 {{list.length}} 条</p>\n</div>",
          "javascript": "new Bee(document.getElementById('template'), {\n  $data: {\n    list: [\n      {name: 'Ant'},\n      {name: 'Bee'},\n      {name: 'Cicada'},\n      {name: 'Dragenfly'}\n    ]\n  }\n})",
          "fixCode": {
            "javascript": "var bee = new Bee(document.getElementById('template'), {\n  $data: {\n    list: [\n      {name: 'Ant'},\n      {name: 'Bee'},\n      {name: 'Cicada'},\n      {name: 'Dragenfly'}\n    ]\n  }\n})\n\nbee.list.push({name: 'Earthworm'})\nbee.list.$set(2, {name: 'cicada'});"
          }
        },
        {
          "note": "### 双向绑定\n\n`b-model` 指令负责双向绑定. 该指令主要用于表单各输入控件上. \n\n普通的 `input` 和 `textarea`  对应的值为字符串. \n\n`checkbox` 对应值为布尔值\n\n`radio`  则对应选中项的值\n\n普通 `select`  类似 `radio`, 带有 `multiple` 属性的多选 `select` 则对应一个数组.",
          "html": "<div id=\"template\">\n  <ul>\n  \t<li>名字: {{name}}</li>\n   <li>昆虫?:{{insect}}</li>\n   <li>性别: {{sex}}</li>\n  </ul>\n  <form action=\"javascript:;\">\n\t<div>名称: <input b-model=\"name\" type=\"text\" /></div>\n   <div>昆虫?:<input type=\"checkbox\" b-model=\"insect\" /></div>\n    <div>性别: \n    \t<label>雌: \n        <input type=\"radio\" name=\"sex\" b-model=\"sex\" value=\"female\" />\n       </label>\n    \t<label>雄: \n        <input type=\"radio\" name=\"sex\" b-model=\"sex\" value=\"male\" />\n       </label>\n    \t<label>Unknow: \n        <input type=\"radio\" name=\"sex\" b-model=\"sex\" value=\"unknow\" />\n       </label>\n    </div>\n  </form>\n</div>\n",
          "javascript": "var bee = new Bee(document.getElementById('template'), {\n\t$data: {\n   \t\tname: 'Ant',\n   \t\tinsect: true,\n\t    sex: 'unknow'\n   }\n});\n\n",
          "fixCode": {
            "javascript": "var bee = new Bee(document.getElementById('template'), {\n\t$data: {\n  \t \tname: 'Ant'\n   }\n});\n\n",
            "html": "<div id=\"template\">\n  <ul>\n  \t<li>名字: {{name}}</li>\n   <li>动作: {{actions}}</li>\n  </ul>\n  <form action=\"javascript:;\">\n  \t<select b-model=\"name\">\n  \t\t<option value=\"Ant\">Ant</option>\n      <option value=\"Bee\">Bee</option>\n      <option value=\"Cicada\">Cicada</option>\n  \t</select>\n    <select multiple b-model=\"actions\">\n  \t\t<option value=\"fly\">飞</option>\n      <option value=\"deflower\">采花</option>\n  \t</select>\n  </form>\n</div>\n"
          }
        },
        {
          "note": "### 事件\n\n通过 `b-on`  指令我们可以进行事件处理.   \n\n`b-on` 指令的值是一个包含了事件名及处理函数的对象.  事件处理函数内的 `this` 指向当前 `bee` 实例.\n\n`b-on` 指令还提供了基本的事件委托功能, 在事件名后写上选择器即可:\n```\n{\n  'click li': function(e) { \n    //dosth here\n   }\n}\n```\n",
          "html": "<div id=\"template\">\n  <button b-on=\"{click: clear}\">清空</button>\n  <div b-on=\"events\">\n      事件日志: \n      <ul>\n          <li b-repeat=\"item in actions\">{{item}}</li>\n      </ul>\n  </div>\n</div>",
          "javascript": "new Bee(document.getElementById('template'), {\n  \t$data: {\n      actions : []\n\t},\n\tevents: {\n      click: function() { this.actions.unshift('click!') },\n      mouseenter: function() { this.actions.unshift('mouseenter!') },\n      mouseleave: function() { this.actions.unshift('mouseleave!') }\n   },\n   clear: function() {\n      this.actions.splice(0, this.actions.length)\n   }\n})",
          "fixCode": {
            "javascript": "new Bee(document.getElementById('template'), {\n  \t$data: {\n      actions : []\n\t},\n\tevents: {\n      click: function() { this.actions.unshift('click!') },\n      mouseenter: function() { this.actions.unshift('mouseenter!') },\n      mouseleave: function() { this.actions.unshift('mouseleave!') },\n      'click li': function() { this.actions.unshift('click li!') }\n   },\n   clear: function() {\n      this.actions.splice(0, this.actions.length)\n   }\n})"
          }
        },
        {
          "note": "### b-attr\n\n`HTML` 属性指令 `b-attr` 的值为一个对象, 会映射成节点的 `HTML` 属性.\n\n写法 `attribute=\"{{expression}}\"` 是 `b-attr` 指令的一个特例, 这种写法只针对单个属性.\n\n另外一种 `b-attr` 的特例是条件属性,  其语法是: `attribute?=\"expression\"`. 后面表达式为真时, 属性插入, 表达式为假时, 属性移除. 这种写法对一些 `Boolean` 属性比较有用, 比如表单元素的: `readonly, disabled` 等.",
          "html": "<div id=\"template\">\n\t<div b-attr=\"attr\">b-attr 展示区. 可以添加任何属性了</div>\n  \t<!-- value=\"{{attr.style}}\" 不具备双向绑定功能. 想要双向绑定请使用 b-model=\"attr.style\" -->\n  \t<input b-model=\"attr.style\" disabled?=\"disabled\" type=\"text\" />\n</div>",
          "javascript": "new Bee(document.getElementById('template'), {\n\t$data: {\n    \tattr: {\n \t\t\tstyle: 'color:red'\n    \t},\n    \tdisabled: false\n    }\n})",
          "fixCode": {}
        },
        {
          "note": "### b-style\n\n样式指令 `b-sytle` 接受字符串或对象类型的值.  如: `b-style=\"{color: 'green'}\"`, `b-style=\"'color: green'\"` 都是合法的 `b-style` 指令.\n\n当 `b-style` 指令值为对象时, 驼峰式的 `javascript` 属性将转换成 `-` 连接符的 `css` 属性. \n\n需要注意的一点是 `style=\"{{expression}}\"` 这种写法在 IE 浏览器中无效, 因为 IE 浏览器在解析 `style` 属性时会将它认为不合法的属性值移除掉, 造成 `beejs` 没有机会读取表达式的内容.\n\n### b-src\n\n普通的 `src` 属性表达式写法 `src=\"{{src}}\"` 可能会想服务器发送一条 url 为 `{{src}}` 的无效请求. 所以应该使用 `b-src` 指令替代.\n",
          "html": "<div id=\"template\">\n\t<p b-style=\"style\">晚上要不要看球?</p>\n\t<p b-style=\"'color: ' + style.color\">困=_=. 明天看录播吧</p>\n</div>",
          "javascript": "new Bee(document.getElementById('template'), {\n\t$data: {\n   \t\tstyle: {\n        color: 'red',\n        fontSize: '2em'\n   \t\t}\n   }\n})",
          "fixCode": {}
        },
        {
          "note": "### b-content\n\n`b-content` 是比 `b-text` 和 `b-html` 更为强大的内容输出指令.\n\n 除了支持普通的字符串, HTML片段外, `b-content` 还支持子模板的解析与输出.\n\n`b-content`   指令的值可以是普通字符串, `HTML` 标签片段, 或 `DOM` 元素.",
          "html": "<div id=\"template\">\n\t<span b-content=\"content1\"></span>\n</div>",
          "javascript": "new Bee(document.getElementById('template'), {\n\t$data: {\n      name: 'Bee'\n   },\n  \tcontent1: '{{name}}'\n})",
          "fixCode": {
            "javascript": "new Bee(document.getElementById('template'), {\n\t$data: {\n      name: 'Bee',\n      otherName: 'Cicada'\n   },\n  \tcontent1: '{{name}} - <span b-content=\"content2\"></span>',\n\tcontent2: '<big>{{otherName}}</big>'\n})"
          }
        },
        {
          "note": "### b-component 组件\n\n使用一个组件之前, 需要先定义它.  在 `beejs` 中, 组件就是继承 `Bee` 构造函数的一个子构造函数. \n\n使用 `Bee.extend` 方法创建一个子构造函数: \n```js\nvar MyAwesomeComponent = Bee.extend({\n  //原型属性\n})\n```\n\n然后通过 `Bee.component` 注册这个组件: \n\n```js\nBee.component('my-awesome', MyAwesomeComponent)\n```\n\n自定义标签就是基于组件指令, 比如 `<my-awesome></my-awesome>` 等同于 `<span b-component=\"my-awesome\"></span>`\n\n关于组件的内容, 我们会有专门内容进行叙述.",
          "html": "<div id=\"template\">\n\t<span b-component=\"my-awesome\"></span>\n</div>",
          "javascript": "var MyAwesomeComponent = Bee.extend({\n  $tpl: '<div>啥? 这就是一个组件!</div>'\n})\n\nBee.component('my-awesome', MyAwesomeComponent)\n\nnew Bee(document.getElementById('template'))",
          "fixCode": {
            "html": "<div id=\"template\">\n\t<span b-component=\"my-awesome\"></span>\n  \t<my-awesome></my-awesome>\n</div>"
          }
        }
      ],
      "title": "指令向导"
    },
    {
      "steps": [
        {
          "note": "`Beejs` 中同样存在过滤器(filter) 的概念, 过滤器是一类专有的内容处理函数.",
          "fixCode": {}
        }
      ],
      "title": "过滤器(filter)"
    }
  ],
  "title": "Beejs 入门向导"
}